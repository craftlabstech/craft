// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String? // For email/password authentication
  image         String?
  bio           String?
  occupation    String?
  company       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts            Account[]
  sessions            Session[]
  passwordResetTokens PasswordResetToken[]

  // AI chat-related relations
  projects Project[]
  chats    Chat[]

  @@index([email])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// AI Coding Assistant models
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  framework   String   @default("nextjs") // nextjs, react, vue, etc.
  template    String? // starter template used
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats  Chat[]
  files  ProjectFile[]

  @@index([userId])
  @@index([updatedAt])
}

model Chat {
  id        String   @id @default(cuid())
  title     String? // Generated from first message or user-set
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String? // Optional - chat can be tied to a project
  project   Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  messages  ChatMessage[]

  @@index([userId])
  @@index([projectId])
  @@index([updatedAt])
}

model ChatMessage {
  id        String      @id @default(cuid())
  content   String      @db.Text
  role      MessageRole @default(USER)
  type      MessageType @default(TEXT)
  metadata  Json? // For storing code, file paths, etc.
  createdAt DateTime    @default(now())

  // Relations
  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([createdAt])
}

model ProjectFile {
  id        String   @id @default(cuid())
  path      String // relative path within project
  content   String   @db.Text
  language  String // typescript, javascript, css, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, path])
  @@index([projectId])
}

// Enums
enum MessageRole {
  USER // User message
  ASSISTANT // AI assistant response
  SYSTEM // System message
}

enum MessageType {
  TEXT // Regular text message
  CODE // Code generation/modification
  PREVIEW // Preview update
  ERROR // Error message
  THINKING // AI thinking/processing
}
